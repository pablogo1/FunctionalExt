namespace FunctionalExt;

public static partial class AsyncOptionExtensions
{
    /// <summary>
    /// Converts an Option to a Result. If the Option is Some, it returns a successful Result with the wrapped value.
    /// If the Option is None, it returns a failed Result with the provided error.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="option">The task-based option</param>
    /// <param name="error">The error to be included on the failed result.</param>
    /// <returns>A <see cref="Task{Result{T, Error}}"/> instance. </returns>
    public static async Task<Result<T, Error>> ToResultAsync<T>(this Task<Option<T>> optionTask, Error error)
    {
        var option = await optionTask.ConfigureAwait(false);
        return option.ToResult(error);
    }

    /// <summary>
    /// Converts an Option to a Result. If the Option is Some, it returns a successful Result with the wrapped value.
    /// If the Option is None, it returns a failed Result with the error generated by the provided function.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="option">The task-based option</param>
    /// <param name="errorFn">A function that generates the error to be included on the failed result.</param>
    /// <returns>A <see cref="Result{T, Error}"/> instance. </returns>
    public static async Task<Result<T, Error>> ToResultAsync<T>(this Task<Option<T>> optionTask, Func<Error> errorFn)
    {
        var option = await optionTask.ConfigureAwait(false);
        return option.ToResult(errorFn());
    }
}